var commonIssuesData='{"baselineAvailable":"True","baselineDesc":"Baseline is same code base snapshot.","rules":[{"id":"ND1203","name":"Class with no descendant should be sealed if possible","cat":"Object Oriented Design","url":"../../NDependReport.html?e=1#Query2132437556"},{"id":"ND1208","name":"Methods should be declared static if possible","cat":"Object Oriented Design","url":"../../NDependReport.html?e=1#Query46159255"},{"id":"ND1305","name":"Avoid namespaces with few types","cat":"Design","url":"../../NDependReport.html?e=1#Query3431837327"},{"id":"ND1700","name":"Potentially Dead Types","cat":"Dead Code","url":"../../NDependReport.html?e=1#Query3912344400"},{"id":"ND1701","name":"Potentially Dead Methods","cat":"Dead Code","url":"../../NDependReport.html?e=1#Query1236384003"},{"id":"ND1800","name":"Methods that could have a lower visibility","cat":"Visibility","url":"../../NDependReport.html?e=1#Query3956120347"},{"id":"ND1806","name":"Constructors of abstract classes should be declared as protected or private","cat":"Visibility","url":"../../NDependReport.html?e=1#Query4289619194"},{"id":"ND1900","name":"Fields should be marked as ReadOnly when possible","cat":"Immutability","url":"../../NDependReport.html?e=1#Query2144868306"},{"id":"ND2003","name":"Abstract base class should be suffixed with \'Base\'","cat":"Naming Conventions","url":"../../NDependReport.html?e=1#Query3500616363"}]}'